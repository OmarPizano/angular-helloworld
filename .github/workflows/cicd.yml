name: Build, push and deploy

on:
  push:
    branches:
      - 'main'

jobs:

  build_push_deploy:

    permissions:
      deployments: write

    runs-on: ubuntu-latest
    
    steps:
   
      - name: CHECKOUT REPOSITORY
        uses: actions/checkout@v2

      - name: SET UP PATH FILTERS
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            backend:
              - 'backend/**'
              - 'docker/build/Dockerfile.backend'
            frontend:
              - 'frontend/**'
              - 'docker/build/Dockerfile.frontend'
              - 'docker/build/nginx-frontend.conf'
            proxy:
              - 'docker/build/Dockerfile.proxy'
              - 'docker/build/nginx-proxy.conf'
      
      - name: LOGIN TO DOCKERHUB
        uses: docker/login-action@v3
        if: steps.filter.outputs.backend == 'true' || steps.filter.outputs.frontend == 'true' || steps.filter.outputs.proxy == 'true'
        with:
          username: tomnoir
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      
      - name: BUILD BACKEND
        uses: docker/build-push-action@v5 
        id: build_backend
        if: steps.filter.outputs.backend == 'true'
        with:
          push: true
          file: ./docker/build/Dockerfile.backend
          tags: tomnoir/helloworld-backend:latest
      
      - name: BUILD FRONTEND
        uses: docker/build-push-action@v5 
        id: build_frontend
        if: steps.filter.outputs.frontend == 'true'
        with:
          push: true
          file: ./docker/build/Dockerfile.frontend
          tags: tomnoir/helloworld-frontend:latest
      
      - name: BUILD PROXY
        uses: docker/build-push-action@v5 
        id: build_proxy
        if: steps.filter.outputs.proxy == 'true'
        with:
          push: true
          file: ./docker/build/Dockerfile.proxy
          tags: tomnoir/helloworld-proxy:latest

      - name: CREATE DEPLOYMENT
        uses: chrnorm/deployment-action@v2
        if: steps.build_backend.outcome == 'success' || steps.build_frontend.outcome == 'success' || steps.build_proxy.outcome == 'success'
        id: create_deployment
        with:
          token: ${{ github.token }}
          environment-url: ${{ secrets.DEPLOY_URL }}
          environment: production

      - name: DEPLOY TO PRODUCTION SERVER
        uses: appleboy/ssh-action@v1.0.3
        id: deploy
        if: steps.create_deployment.outcome == 'success'
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.PROD_KEY }}
          port: ${{ secrets.PROD_PORT }}
          script: bash services-update.sh

      - name: UPDATE DEPLOYMENT STATUS (SUCCESS)
        uses: chrnorm/deployment-status@v2
        if: steps.create_deployment.outcome == 'success' && success()
        with:
          token: ${{ github.token }}
          environment-url: ${{ secrets.DEPLOY_URL }}
          state: 'success'
          deployment-id: ${{ steps.create_deployment.outputs.deployment_id }}
      
      - name: UPDATE DEPLOYMENT STATUS (FAILURE)
        uses: chrnorm/deployment-status@v2
        if: steps.create_deployment.outcome == 'success' && failure()
        with:
          token: ${{ github.token }}
          environment-url: ${{ secrets.DEPLOY_URL }}
          state: 'failure'
          deployment-id: ${{ steps.create_deployment.outputs.deployment_id }}
